


查看文件的状态
$ git status 

$ git status -s //查看被修改了的文件



跟踪新文件

$ git add index.html(文件的名称) 


7.提交更新

可以通过执行 git commit 命令将在暂存区的文件提交到 Git 仓库中进行保存

$ git commit -m "新建了index.html文件"  //提交到 Git仓库

其中 -m 选项后面是本次 提交的信息 用来对提交的内容做进一步的描述


11.撤销对文件的修改（很少用）
$ git checkout -- index.html
撤销操作的本质：用Git仓库中保存的文件，覆盖工作区中指定的文件

12.向暂存区中一次性添加多个文件
如果需要被暂存的文件个数比较多，可以使用如下的命令，一次性将所有的新增
和修改过的文件加入暂存区
$ git add .    //在今后的开发中，会经常使用这个命令，将新增和修改过后的文件加入暂存区




13.取消暂存的文件
如果需要从暂存区中移除对应的文件，可以使用如下命令：
$ git reset HEAD index.html(要移除的文件)
$ git reset HEAD .   //移除所有的文件


14.跳过使用暂存区域
Git标准的工作流程是工作区——暂存区——Git仓库，但有时候这么做略显繁琐，
此时可以跳过暂存区，直接将工作区中的修改提交到Git仓库，这时候Git工作
的流程简化为了 工作区——Git仓库
Git提供了一个跳过使用暂存区的方法，只要在提交的时候，给git commit 加上
-a选项，Git就会自动把跟踪过来的文件一并提交到Git仓库，从而跳过暂存区
$ git commit -a -m "描述信息"

15.移除文件
从Git仓库中移除文件的方式有两种：

1、git rm -f index.html(移除的文件)
 //从Git仓库中和工作区同时移除对应文件

2、git rm --cached index.css(移除的文件)
 //只从Git仓库中移除指定的文件，保留工作区中对应的文件


 16.忽略文件
 总会有些文件无需纳入Git仓库的管理，也不希望它们出现在未跟踪文件列表，
 在这种情况下，可以创建一个名为 .gitignore的配置文件，列出要忽略的文件
 1. 以 # 开头的是注释
 2. 以 / 结尾的是目录
 3. 以 / 开头的是防止递归
 4. 以 ！开头表示取反
 5. 可以使用 glob 模式进行文件和文件夹的匹配（glob指简化了的正则表达式）

 17.glob模式
 所谓的 glob模式 是指简化了的正则表达式
 1.星号 * 匹配零个或多个任意字符
 2.[abc]匹配任何一个列在方括号中的字符 [abc]中只能匹配 [a]或[b]或[c]
 3.问号 ？ 只匹配一个任意字符
 4.在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以
 匹配 （比如 [0-9] 表示匹配所有0到9的数字



18.gitignore忽略文件的例子

1.#如何忽略所有的.a文件
*.a

2. 怎样在忽略所有的.a文件下，依然能跟踪所有的 lib.a 文件的名称
!lib.a

3. 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO
/TODO

4. 忽略任何目录下名为build的文件夹
build/

5. 忽略 doc/目录(notes.text)，但不忽略 doc/目录/目录(notes.text)
doc/*.text

6.忽略 doc/目录及所有目录下的 .pdf文件
doc/**/*.pdf
